#layout.tsx
import type React from "react"
import { AuthLayout } from "@/components/layout/auth-layout"

export default function AchievementsLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <AuthLayout>{children}</AuthLayout>
}

#loading.tsx
export default function Loading() {
  return null
}

#page.tsx
"use client"

import { useState } from "react"
import Image from "next/image"
import { Award, Calendar, Filter, Search, Share2, Trophy, Users } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Progress } from "@/components/ui/progress"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface Achievement {
  id: number
  name: string
  description: string
  image: string
  category: string
  earned?: boolean
  earnedDate?: string
  progress?: number
  total?: number
  level?: number
  maxLevel?: number
}

export default function AchievementsPage() {
  const [searchQuery, setSearchQuery] = useState("")

  const achievements: Achievement[] = [
    {
      id: 1,
      name: "Tree Planter",
      description: "Plant 10 trees in reforestation events.",
      image: "/placeholder.svg?height=100&width=100&text=🌳",
      category: "Environment",
      earned: true,
      earnedDate: "June 5, 2024",
      level: 2,
      maxLevel: 3,
    },
    {
      id: 2,
      name: "Beach Guardian",
      description: "Participate in 5 beach cleanup events.",
      image: "/placeholder.svg?height=100&width=100&text=🏖️",
      category: "Environment",
      earned: true,
      earnedDate: "May 20, 2024",
      level: 1,
      maxLevel: 3,
    },
    {
      id: 3,
      name: "Team Player",
      description: "Join a team and participate in 3 team events.",
      image: "/placeholder.svg?height=100&width=100&text=👥",
      category: "Community",
      earned: true,
      earnedDate: "April 15, 2024",
      level: 1,
      maxLevel: 3,
    },
    {
      id: 4,
      name: "Wildlife Protector",
      description: "Participate in 3 wildlife conservation events.",
      image: "/placeholder.svg?height=100&width=100&text=🦊",
      category: "Environment",
      earned: false,
      progress: 2,
      total: 3,
    },
    {
      id: 5,
      name: "Eco Educator",
      description: "Participate in or host 5 environmental education events.",
      image: "/placeholder.svg?height=100&width=100&text=📚",
      category: "Education",
      earned: false,
      progress: 2,
      total: 5,
    },
    {
      id: 6,
      name: "Waste Warrior",
      description: "Participate in 10 recycling or waste management events.",
      image: "/placeholder.svg?height=100&width=100&text=♻️",
      category: "Environment",
      earned: false,
      progress: 4,
      total: 10,
    },
    {
      id: 7,
      name: "Community Leader",
      description: "Lead or organize 3 volunteer events.",
      image: "/placeholder.svg?height=100&width=100&text=🌟",
      category: "Leadership",
      earned: false,
      progress: 1,
      total: 3,
    },
    {
      id: 8,
      name: "Social Butterfly",
      description: "Connect with 10 other volunteers on the platform.",
      image: "/placeholder.svg?height=100&width=100&text=🦋",
      category: "Community",
      earned: false,
      progress: 7,
      total: 10,
    },
    {
      id: 9,
      name: "Eco Warrior",
      description: "Complete 20 volunteer events across all categories.",
      image: "/placeholder.svg?height=100&width=100&text=🌍",
      category: "Special",
      earned: false,
      progress: 12,
      total: 20,
    },
  ]

  const filteredAchievements = achievements.filter(
    (achievement) =>
      achievement.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      achievement.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      achievement.category.toLowerCase().includes(searchQuery.toLowerCase()),
  )

  const earnedAchievements = filteredAchievements.filter((a) => a.earned)
  const inProgressAchievements = filteredAchievements.filter((a) => !a.earned)

  return (
    <div className="space-y-6">
      <div className="flex flex-col justify-between gap-4 sm:flex-row sm:items-center">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Achievements & Badges</h1>
          <p className="text-muted-foreground">Track your progress and earn badges for your volunteer work.</p>
        </div>
        <Button variant="outline">
          <Share2 className="mr-2 h-4 w-4" />
          Share Achievements
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid gap-4 md:grid-cols-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Total Badges</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <Award className="h-5 w-5 text-primary" />
              <div className="text-2xl font-bold">{earnedAchievements.length}</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">In Progress</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <Trophy className="h-5 w-5 text-primary" />
              <div className="text-2xl font-bold">{inProgressAchievements.length}</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Volunteer Hours</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <Calendar className="h-5 w-5 text-primary" />
              <div className="text-2xl font-bold">24</div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Civic Score</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <Users className="h-5 w-5 text-primary" />
              <div className="text-2xl font-bold">85</div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filter */}
      <div className="flex flex-col gap-4 sm:flex-row">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search achievements..."
            className="pl-9"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <div className="flex gap-2">
          <Select defaultValue="all">
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Category" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Categories</SelectItem>
              <SelectItem value="environment">Environment</SelectItem>
              <SelectItem value="community">Community</SelectItem>
              <SelectItem value="education">Education</SelectItem>
              <SelectItem value="leadership">Leadership</SelectItem>
              <SelectItem value="special">Special</SelectItem>
            </SelectContent>
          </Select>
          <Button variant="outline">
            <Filter className="mr-2 h-4 w-4" />
            Filters
          </Button>
        </div>
      </div>

      <Tabs defaultValue="all">
        <TabsList>
          <TabsTrigger value="all">All</TabsTrigger>
          <TabsTrigger value="earned">Earned</TabsTrigger>
          <TabsTrigger value="in-progress">In Progress</TabsTrigger>
        </TabsList>

        <TabsContent value="all" className="space-y-6 pt-4">
          <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {filteredAchievements.map((achievement) => (
              <AchievementCard key={achievement.id} achievement={achievement} />
            ))}
          </div>
        </TabsContent>

        <TabsContent value="earned" className="space-y-6 pt-4">
          <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {earnedAchievements.map((achievement) => (
              <AchievementCard key={achievement.id} achievement={achievement} />
            ))}

            {earnedAchievements.length === 0 && (
              <div className="col-span-full flex flex-col items-center justify-center rounded-lg border border-dashed p-8 text-center">
                <Award className="h-12 w-12 text-muted-foreground" />
                <h3 className="mt-4 text-lg font-medium">No Badges Yet</h3>
                <p className="mt-2 text-sm text-muted-foreground">
                  You haven't earned any badges yet. Start volunteering to earn your first badge!
                </p>
                <Button className="mt-4">Browse Opportunities</Button>
              </div>
            )}
          </div>
        </TabsContent>

        <TabsContent value="in-progress" className="space-y-6 pt-4">
          <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {inProgressAchievements.map((achievement) => (
              <AchievementCard key={achievement.id} achievement={achievement} />
            ))}

            {inProgressAchievements.length === 0 && (
              <div className="col-span-full flex flex-col items-center justify-center rounded-lg border border-dashed p-8 text-center">
                <Trophy className="h-12 w-12 text-muted-foreground" />
                <h3 className="mt-4 text-lg font-medium">All Badges Earned</h3>
                <p className="mt-2 text-sm text-muted-foreground">
                  You've earned all available badges. Check back later for new achievements!
                </p>
              </div>
            )}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}

function AchievementCard({ achievement }: { achievement: Achievement }) {
  const { name, description, image, category, earned, earnedDate, progress, total, level, maxLevel } = achievement

  return (
    <Card className={earned ? "border-primary/50" : ""}>
      <CardHeader className="pb-2 text-center">
        <div className="mx-auto mb-2">
          <div className="relative mx-auto h-24 w-24">
            <Image
              src={image || "/placeholder.svg"}
              alt={name}
              fill
              className={`rounded-full object-cover ${!earned ? "grayscale opacity-50" : ""}`}
            />
            {earned && level && (
              <div className="absolute -bottom-2 -right-2 flex h-8 w-8 items-center justify-center rounded-full bg-primary text-xs font-bold text-primary-foreground">
                Lv{level}
              </div>
            )}
          </div>
        </div>
        <Badge className="mx-auto mb-2">{category}</Badge>
        <CardTitle className="text-lg">{name}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent className="text-center">
        {earned ? (
          <div className="flex flex-col items-center">
            <Badge variant="outline" className="bg-primary/10 text-primary">
              Earned on {earnedDate}
            </Badge>
            {level && maxLevel && (
              <div className="mt-2 w-full space-y-1">
                <div className="flex justify-between text-xs">
                  <span>
                    Level {level}/{maxLevel}
                  </span>
                  <span>{level === maxLevel ? "Max Level" : `${level * 33}%`}</span>
                </div>
                <Progress value={(level / maxLevel) * 100} className="h-1" />
              </div>
            )}
          </div>
        ) : (
          <div className="space-y-1">
            <div className="flex justify-between text-xs">
              <span>Progress</span>
              <span>
                {progress}/{total}
              </span>
            </div>
            <Progress value={(progress! / total!) * 100} className="h-1" />
          </div>
        )}
      </CardContent>
      <CardFooter className="justify-center">
        <Button variant="outline" size="sm">
          View Details
        </Button>
      </CardFooter>
    </Card>
  )
}
