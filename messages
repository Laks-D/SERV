#layout.tsx
import type React from "react"
import { AuthLayout } from "@/components/layout/auth-layout"

export default function MessagesLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <AuthLayout>{children}</AuthLayout>
}
#loading.tsx
export default function Loading() {
  return null
}
#page.tsx
"use client"

import type React from "react"

import { useState } from "react"
import { Check, ChevronDown, Image, Paperclip, Plus, Search, Send, Smile, User } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Textarea } from "@/components/ui/textarea"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

interface Contact {
  id: number
  name: string
  avatar: string
  status: "online" | "offline" | "away"
  lastMessage?: string
  lastMessageTime?: string
  unread?: number
}

interface Message {
  id: number
  senderId: number
  text: string
  time: string
  status?: "sent" | "delivered" | "read"
  isMe?: boolean
}

export default function MessagesPage() {
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedContact, setSelectedContact] = useState<Contact | null>(null)
  const [messageText, setMessageText] = useState("")

  const contacts: Contact[] = [
    {
      id: 1,
      name: "Sarah Johnson",
      avatar: "/placeholder.svg?height=40&width=40&text=SJ",
      status: "online",
      lastMessage: "Are you coming to the beach cleanup this weekend?",
      lastMessageTime: "10:30 AM",
      unread: 2,
    },
    {
      id: 2,
      name: "Green Warriors Team",
      avatar: "/placeholder.svg?height=40&width=40&text=GW",
      status: "online",
      lastMessage: "Meeting scheduled for tomorrow at 5 PM",
      lastMessageTime: "Yesterday",
      unread: 1,
    },
    {
      id: 3,
      name: "Michael Chen",
      avatar: "/placeholder.svg?height=40&width=40&text=MC",
      status: "away",
      lastMessage: "Thanks for helping with the tree planting!",
      lastMessageTime: "Yesterday",
    },
    {
      id: 4,
      name: "Emma Wilson",
      avatar: "/placeholder.svg?height=40&width=40&text=EW",
      status: "offline",
      lastMessage: "Let me know when you're free to discuss the project",
      lastMessageTime: "Monday",
    },
    {
      id: 5,
      name: "Ocean Conservation Group",
      avatar: "/placeholder.svg?height=40&width=40&text=OC",
      status: "online",
      lastMessage: "New volunteer opportunity available",
      lastMessageTime: "Monday",
    },
  ]

  const messages: Message[] = [
    {
      id: 1,
      senderId: 1,
      text: "Hi there! Are you coming to the beach cleanup this weekend?",
      time: "10:15 AM",
    },
    {
      id: 2,
      senderId: 0,
      text: "Hey Sarah! Yes, I'm planning to be there. What time does it start again?",
      time: "10:20 AM",
      status: "read",
      isMe: true,
    },
    {
      id: 3,
      senderId: 1,
      text: "Great! It starts at 9 AM at Sunset Beach. We'll provide all the equipment, just bring water and sunscreen.",
      time: "10:25 AM",
    },
    {
      id: 4,
      senderId: 0,
      text: "Perfect, I'll be there. Are there any specific areas we'll be focusing on?",
      time: "10:28 AM",
      status: "read",
      isMe: true,
    },
    {
      id: 5,
      senderId: 1,
      text: "We'll be focusing on the north side of the beach where there's been a lot of plastic waste washing up. We're expecting about 30 volunteers.",
      time: "10:30 AM",
    },
  ]

  const filteredContacts = contacts.filter((contact) => contact.name.toLowerCase().includes(searchQuery.toLowerCase()))

  const handleSendMessage = () => {
    if (messageText.trim()) {
      // In a real app, you would send the message to the backend
      console.log("Sending message:", messageText)
      setMessageText("")
    }
  }

  return (
    <div className="flex h-[calc(100vh-8rem)] flex-col md:h-[calc(100vh-6rem)]">
      <div className="mb-4">
        <h1 className="text-2xl font-bold tracking-tight">Messages</h1>
        <p className="text-muted-foreground">Connect with volunteers and organizations.</p>
      </div>

      <Card className="flex flex-1 flex-col overflow-hidden">
        <div className="grid flex-1 md:grid-cols-[300px_1fr]">
          {/* Contacts Sidebar */}
          <div className="border-r">
            <div className="p-4">
              <div className="flex items-center gap-2">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search contacts..."
                    className="pl-9"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                  />
                </div>
                <Button size="icon" variant="ghost">
                  <Plus className="h-4 w-4" />
                </Button>
              </div>

              <Tabs defaultValue="all" className="mt-4">
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="all">All</TabsTrigger>
                  <TabsTrigger value="direct">Direct</TabsTrigger>
                  <TabsTrigger value="groups">Groups</TabsTrigger>
                </TabsList>
              </Tabs>
            </div>

            <ScrollArea className="h-[calc(100vh-16rem)] md:h-[calc(100vh-14rem)]">
              <div className="space-y-1 p-2">
                {filteredContacts.map((contact) => (
                  <button
                    key={contact.id}
                    className={`flex w-full items-center gap-3 rounded-md p-2 text-left hover:bg-muted ${
                      selectedContact?.id === contact.id ? "bg-muted" : ""
                    }`}
                    onClick={() => setSelectedContact(contact)}
                  >
                    <div className="relative">
                      <Avatar>
                        <AvatarImage src={contact.avatar} alt={contact.name} />
                        <AvatarFallback>{contact.name.charAt(0)}</AvatarFallback>
                      </Avatar>
                      <span
                        className={`absolute bottom-0 right-0 h-3 w-3 rounded-full border-2 border-background ${
                          contact.status === "online"
                            ? "bg-green-500"
                            : contact.status === "away"
                              ? "bg-yellow-500"
                              : "bg-gray-400"
                        }`}
                      />
                    </div>
                    <div className="flex-1 truncate">
                      <div className="flex items-center justify-between">
                        <span className="font-medium">{contact.name}</span>
                        <span className="text-xs text-muted-foreground">{contact.lastMessageTime}</span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="truncate text-sm text-muted-foreground">{contact.lastMessage}</span>
                        {contact.unread && (
                          <Badge className="ml-2 bg-primary text-primary-foreground">{contact.unread}</Badge>
                        )}
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            </ScrollArea>
          </div>

          {/* Chat Area */}
          {selectedContact ? (
            <div className="flex flex-col">
              {/* Chat Header */}
              <div className="flex items-center justify-between border-b p-4">
                <div className="flex items-center gap-3">
                  <Avatar>
                    <AvatarImage src={selectedContact.avatar} alt={selectedContact.name} />
                    <AvatarFallback>{selectedContact.name.charAt(0)}</AvatarFallback>
                  </Avatar>
                  <div>
                    <div className="font-medium">{selectedContact.name}</div>
                    <div className="flex items-center gap-1 text-xs text-muted-foreground">
                      <span
                        className={`h-2 w-2 rounded-full ${
                          selectedContact.status === "online"
                            ? "bg-green-500"
                            : selectedContact.status === "away"
                              ? "bg-yellow-500"
                              : "bg-gray-400"
                        }`}
                      />
                      <span>
                        {selectedContact.status === "online"
                          ? "Online"
                          : selectedContact.status === "away"
                            ? "Away"
                            : "Offline"}
                      </span>
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-1">
                  <Button variant="ghost" size="icon">
                    <User className="h-4 w-4" />
                  </Button>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="icon">
                        <ChevronDown className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem>View Profile</DropdownMenuItem>
                      <DropdownMenuItem>Mute Conversation</DropdownMenuItem>
                      <DropdownMenuItem>Block Contact</DropdownMenuItem>
                      <DropdownMenuItem>Clear Chat</DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </div>

              {/* Messages */}
              <ScrollArea className="flex-1 p-4">
                <div className="space-y-4">
                  {messages.map((message) => (
                    <div key={message.id} className={`flex ${message.isMe ? "justify-end" : "justify-start"}`}>
                      <div
                        className={`max-w-[80%] rounded-lg p-3 ${
                          message.isMe ? "bg-primary text-primary-foreground" : "bg-muted"
                        }`}
                      >
                        <div className="text-sm">{message.text}</div>
                        <div className="mt-1 flex items-center justify-end gap-1 text-xs">
                          <span className={message.isMe ? "text-primary-foreground/70" : "text-muted-foreground"}>
                            {message.time}
                          </span>
                          {message.isMe && message.status && (
                            <Check
                              className={`h-3 w-3 ${
                                message.status === "read" ? "text-primary-foreground" : "text-primary-foreground/70"
                              }`}
                            />
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </ScrollArea>

              {/* Message Input */}
              <div className="border-t p-4">
                <div className="flex items-end gap-2">
                  <Textarea
                    placeholder="Type a message..."
                    className="min-h-10 flex-1 resize-none"
                    value={messageText}
                    onChange={(e) => setMessageText(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault()
                        handleSendMessage()
                      }
                    }}
                  />
                  <div className="flex gap-1">
                    <Button variant="ghost" size="icon">
                      <Smile className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="icon">
                      <Paperclip className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="icon">
                      <Image className="h-4 w-4" />
                    </Button>
                    <Button size="icon" onClick={handleSendMessage}>
                      <Send className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center p-8 text-center">
              <div className="flex h-20 w-20 items-center justify-center rounded-full bg-muted">
                <MessageIcon className="h-10 w-10 text-muted-foreground" />
              </div>
              <h3 className="mt-4 text-lg font-medium">Select a conversation</h3>
              <p className="mt-2 text-sm text-muted-foreground">Choose a contact from the list to start messaging.</p>
            </div>
          )}
        </div>
      </Card>
    </div>
  )
}

function MessageIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" />
    </svg>
  )
}
